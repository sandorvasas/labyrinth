#FRAGMENT_SHADER_BEGIN

uniform sampler2D screenTexture;
uniform sampler2D depthTexture;
uniform sampler2D normalTexture;
uniform sampler2D rnmTexture;



float edge_5[ 25 ] = float[25]( 
						  0.0, 0.0,  1.0, 0.0, 0.0,
						  0.0, 1.0,  1.0, 1.0, 0.0,
						  1.0, 1.0, -12.0, 1.0, 1.0,
						  0.0, 1.0,  1.0, 1.0, 0.0,
						  0.0, 0.0,  1.0, 0.0, 0.0 );

float gauss_5[ 25 ] = float[25]( 
						  1.0, 1.0,  1.0, 1.0, 1.0,
						  1.0, 1.0,  1.0, 1.0, 1.0,
						  1.0, 1.0,  1.0, 1.0, 1.0,
						  1.0, 1.0,  1.0, 1.0, 1.0,
						  1.0, 1.0,  1.0, 1.0, 1.0 );


float sharpen_5[ 25 ] = float[25]( 
						  0, 0,  -1, 0, 0,
						  0, 0,  -1, 0, 0,
						  -1, -1,  8, -1, -1,
						  0, 0,  -1, 0, 0,
						  0, 0,  -1, 0, 0 );

float sobelX_3[ 9 ] = float[9](
						  -1, 0, 1,
						  -2, 0, 2,
						  -1, 0, 1 );

float sobelY_3[ 9 ] = float[9](
						  -1, -2, -1,
						   0, 0, 0,
						   1, 2, 1 );

float sobelX_5[ 25 ] = float[25]( 
						  -1, -2,  0, 2, 1,
						  -4, -8,  0, 8, 4,
						  -6, -12, 0, 12, 6,
						  -4, -8,  0, 8, 4,
						  -1, -2,  0, 2, 1 );

float sobelY_5[ 25 ] = float[25]( 
						  -1, -4,  -6, -4, -1,
						  -2, -8, -12, -8, -2,
						   0,  0,   0,  0,  0,
						   2,  8,  12,  8,  2,
						   1,  4,   6,  4,  1 );


vec2 offsets_3x3[9] = vec2[9](
	vec2( -1.0, -1.0 ), vec2( 0.0, -1.0 ), vec2( 1.0, -1.0 ),
	vec2( -1.0,  0.0 ), vec2( 0.0,  0.0 ), vec2( 1.0,  0.0 ),
	vec2( -1.0,  1.0 ), vec2( 0.0,  1.0 ), vec2( 1.0,  1.0 )
);

vec2 offsets_5x5[25] = vec2[25](
	vec2( -2.0, -2.0 ), vec2( -1.0, -2.0 ), vec2( 0.0, -2.0 ), vec2( 1.0, -2.0 ), vec2( 2.0, -2.0 ),
	vec2( -2.0, -1.0 ), vec2( -1.0, -1.0 ), vec2( 0.0, -1.0 ), vec2( 1.0, -1.0 ), vec2( 2.0, -1.0 ),
	vec2( -2.0,  0.0 ), vec2( -1.0,  0.0 ), vec2( 0.0,  0.0 ), vec2( 1.0,  0.0 ), vec2( 2.0,  0.0 ),
	vec2( -2.0,  1.0 ), vec2( -1.0,  1.0 ), vec2( 0.0,  1.0 ), vec2( 1.0,  1.0 ), vec2( 2.0,  1.0 ),
	vec2( -2.0,  2.0 ), vec2( -1.0,  2.0 ), vec2( 0.0,  2.0 ), vec2( 1.0,  2.0 ), vec2( 2.0,  2.0 )
);


vec4 filter_3x3( float kernel[ 9 ], vec2 delta, float power ) {
	int i;
	vec4 sum = vec4( 0.0 );
	for ( i = 0; i < 9; i++ ) 
		sum += pow( texture2D( depthTexture, gl_TexCoord[0].st + offsets_3x3[ i ] * delta ), vec4( power ) ) * kernel[ i ];

	return sum;
}


vec4 filter_5x5( float kernel[ 25 ], vec2 delta, float power ) {
	int i;
	vec4 sum = vec4( 0.0 );
	for ( i = 0; i < 25; i++ ) 
		sum += pow( texture2D( depthTexture, gl_TexCoord[0].st + offsets_5x5[ i ] * delta ), vec4( power ) ) * kernel[ i ];
	
	
	return sum;
}

void main() {
	
	vec2 delta = vec2( 1.0/1600.0, 1.0/900.0 );
	
	vec4 diff = texture2D( screenTexture,	gl_TexCoord[0].st );
	vec4 norm = texture2D( normalTexture,	gl_TexCoord[0].st );
	
	float kernel_5x5[ 25 ] = edge_5;

	vec4 sobelX = filter_5x5( sobelX_5,  delta, 1.0 );
	vec4 sobelY = filter_5x5( sobelY_5,  delta, 1.0 );

	float sobel = sqrt( sobelX.x * sobelX.x + sobelY.x * sobelY.x );

	vec3 a = clamp( vec3(pow(1.0 - sobel, 50.0)), vec3( 0.0 ), vec3( 1.0 ) );

	if ( a.x < 0.5 ) a.x = 0; else a.x = 1.0;
	if ( a.y < 0.5 ) a.y = 0; else a.y = 1.0;
	if ( a.z < 0.5 ) a.z = 0; else a.z = 1.0;

	gl_FragColor.xyz = diff.xyz * a;
	gl_FragColor.w   = 1.0;

	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
	//
}

#FRAGMENT_SHADER_END



#VERTEX_SHADER_BEGIN

void main() {
	gl_TexCoord[0].st = gl_MultiTexCoord0.st;
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
}

#VERTEX_SHADER_END